package com.azure.cosmos;

import reactor.core.publisher.Flux;

import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedList;
import java.util.UUID;
import java.util.concurrent.atomic.AtomicReference;

import static java.lang.Thread.sleep;

public class VectorSearchCopying {

        private static boolean diagnostics = false;
        private static boolean normal = false;

        public static void main(String[] args) throws InterruptedException {

            CosmosAsyncClient cosmosAsyncClient = new CosmosClientBuilder()
                .endpoint("")
                .key("")
                .gatewayMode()
                .buildAsyncClient();
            CosmosAsyncDatabase cosmosAsyncDatabase = cosmosAsyncClient.getDatabase("vector search test");
            CosmosAsyncContainer cosmosAsyncContainer = cosmosAsyncDatabase
                .getContainer("test3");
            String vector_1536 = "[-0.010269113,-0.01673832,0.0025070684,-0.009927924,0.0075596725,0.0073790434,-0.0090849865,-0.05860419,0.013500371,-0.050522696,-0.022866337,0.011172259,-0.011747598,-0.011346199,-0.009192026,0.022612117,0.01953473,0.022745917,0.018089695,-0.013440161,-0.006673251,0.025850065,-0.0066765957,-0.0056363046,-0.020457946,-0.020136828,0.01906643,-0.01911995,0.010242353,-0.022759298,0.0061715026,0.0006464189,-0.013279602,-0.009372656,-0.010657132,0.0026927153,0.0042715496,-0.0039403955,0.014303168,0.01376797,0.015841862,0.00022578667,-0.0026609378,0.009386036,-0.0010185488,0.010683891,0.00019714521,-0.017835476,-0.008623378,0.026933841,-0.003545687,-0.0003781927,0.004596013,0.007646642,0.011781047,0.0045525283,0.0055526798,0.013560581,0.029783772,-0.029676732,-0.033369597,0.002610763,-0.01665804,0.008027971,-0.0035122372,-0.015493983,-0.028659856,-0.003579137,0.008509649,0.01917347,0.007673402,0.00095666654,0.015882002,-0.0033784376,0.011319439,-0.019722048,-0.024391651,0.006041048,-0.014182748,-0.009278996,0.018022794,-0.026304984,-0.018798832,0.016470721,0.015601023,0.0061547775,0.011486689,0.0030723712,-0.036875147,-0.017260138,0.00838923,0.0048134374,0.0053018057,0.002868327,0.0031743934,0.008007901,-0.0058938684,0.015734823,-0.0009968064,-0.02480643,0.015520743,0.010877901,0.002376614,-0.013426781,-0.027335241,0.0009993151,-0.007459323,0.010683891,0.02448531,-0.0013898425,-0.0076198825,0.023508575,0.032004844,-0.031897806,0.00077143783,-0.010315943,-0.011714147,0.016109461,0.016885499,-0.031496406,0.024378272,0.015734823,0.014530627,-0.0025137584,0.0008613344,0.023455055,-0.011694077,-0.012175756,0.011379649,0.0036794867,0.0070846844,0.018879112,0.01920023,-0.032272443,-0.008048041,0.014932025,-0.018758692,0.005833659,-0.020163586,-0.0056797895,-0.014811606,0.014329928,-0.006536106,0.005803554,0.012650744,0.025743026,-0.0053653605,0.009499765,0.008536409,-0.0059841834,0.03002461,0.005602855,0.039551135,-0.020324146,-0.005469055,0.0148651255,0.023521954,0.018169973,-0.012242655,-0.026478924,-0.0023548715,-0.010630371,0.01644396,-0.02498037,0.04329752,0.03047953,0.005750034,0.0016641314,-0.0012075406,0.0040106406,0.005442295,0.0166179,0.004920477,0.042200368,0.023307875,0.0023314564,0.018705172,0.0020337526,-0.0220234,0.010643751,-0.03526955,-0.009774054,0.0118947765,0.005820279,-0.01886573,-0.031309087,-0.009379346,-0.004331759,0.002878362,-0.00549916,-0.0037731463,0.0029268644,0.014704566,0.008790628,-0.6602203,0.0036761416,-0.0056898245,-0.024632491,0.032192163,0.00034892405,0.031014727,0.017701676,-0.012811303,0.009546596,0.017019298,0.014570767,-0.014383447,0.009646945,-0.024471931,-0.010202213,0.003331608,-0.020819204,0.012135616,0.0021140324,-0.026465544,0.010342702,-0.007914241,-0.01898615,-0.013346502,-0.0016173016,0.004060815,-0.0014433622,-0.00824205,0.009044847,-0.039845496,0.04412708,-0.0056363046,-0.007941001,0.05477752,-0.021421302,-0.014289788,0.0436454,0.028954215,0.056570433,-0.012971863,-0.0042247195,0.0041711996,-0.0010051689,0.009586735,0.016082702,0.03537659,-0.0025137584,0.007713542,-0.01388839,0.0328344,0.026024004,0.0059674582,-0.010195523,-0.0051111416,-0.008750488,0.036473747,-0.010790931,0.024244472,0.015092585,-0.017527737,0.020029787,-0.0019802328,-0.006084533,-0.014891886,0.0070177843,-0.031710483,-0.019976268,0.00828219,-0.026144424,0.021407923,0.021795942,-0.0002933136,0.009633565,0.019601628,0.018330533,0.005234906,-0.0072853835,-0.014985546,0.00075387664,0.013420091,0.011533518,-0.013058833,-0.0169524,0.028820416,-0.007412493,0.019012911,-0.0023582163,0.031496406,-0.0019902678,0.012858133,0.020872723,-0.025060648,-0.027669739,-0.018571373,0.010509952,0.0036661066,-0.012958483,0.0076131923,-0.009178647,-0.011459928,0.0012769491,-0.0023080416,-0.00038718234,0.012637364,0.028419016,-0.019909367,0.0043685543,0.0061547775,-0.021327643,-0.0027713224,-0.0070646144,-0.0027178025,-0.0167517,-0.0008149227,-0.023669133,0.034199156,-0.010162073,0.034627315,-0.026759902,0.015333424,0.0034854773,-0.006843845,-0.022946617,-0.013507061,0.0034419924,-0.015627783,-0.010302562,-0.01097825,-0.008723728,-0.008636759,0.0025605883,0.020845965,-0.0011255884,0.011580348,0.025823306,-0.00087722304,-0.010175453,0.043244004,0.0023732688,-0.01086452,0.0006175684,-0.010309253,-0.01091804,-0.00543226,-0.032540042,-0.041986287,0.007111444,-0.032540042,-0.00021575172,0.028097898,-0.017099578,-0.008998017,-0.001103846,0.015601023,-0.01907981,-0.0037296615,-0.012731024,-0.010643751,0.016992537,0.019641768,0.015052445,-0.00011425224,-0.023414915,-0.019695288,-0.0109448,-0.000100349636,0.025395148,0.0005076019,-0.048060786,-0.018745312,-0.011961676,-0.010516642,0.012256036,0.017327037,-0.011272609,-0.022438178,-0.008402609,-0.008964567,0.002167552,-0.0013379952,-0.006549486,-0.026920462,-0.017888995,0.0022193994,-0.0052516307,-0.0056195795,0.02511417,0.0050877263,0.019093191,-0.019775568,0.015855242,-0.0016474065,0.009760674,0.0040240204,-0.036339946,0.011794427,0.018169973,0.009539905,0.021541722,0.028633095,-0.034011837,0.010215593,-0.0221572,0.005298461,-0.010329322,-0.0167517,-0.012062026,0.036420226,0.014209508,0.022625498,-0.02498037,-0.004970652,-0.009332516,0.014557387,0.008656829,0.0018062934,0.024190951,-0.011386339,-0.0138348695,0.0022210719,-0.0048502325,0.008917738,-0.007660022,-0.00011874707,0.0012861479,-0.021300882,0.013226082,-0.003331608,-0.0078072017,0.019735428,0.020350905,0.028927455,0.011560278,0.015788343,-0.017741816,-0.007954381,-0.036875147,0.05234237,-0.0046127383,0.039684936,0.009131817,-0.0118747065,-0.012657434,0.0070980643,0.023816314,0.0021140324,0.020524845,-0.00059624406,-0.00339349,-0.0005109469,-0.0048401975,-0.0034955123,0.005549335,0.020779064,-0.023174075,0.025850065,0.007399113,0.0051278663,0.014303168,0.017193237,0.003010489,0.006335407,0.0069308146,0.026117666,-0.005696514,0.00045700895,-0.014758087,-0.0034118877,-0.0012016869,0.0037497315,-0.005810244,0.0025589156,-0.009111747,-0.011446549,0.011486689,0.005308496,-0.0035590671,-0.011312749,0.022304378,-0.015226385,-0.014985546,0.018584752,0.025970485,0.002864982,0.0011063548,-0.0119549865,0.018009415,-0.010550092,0.04693687,0.0019518004,0.021474821,0.008462819,-0.015614403,0.031335846,0.002881707,0.025649367,-0.022638878,0.017768575,-0.014089089,-0.012623984,-0.0050910716,-0.021595242,-0.031014727,0.050174817,-0.026693003,-0.010048344,-0.007833961,0.0013789713,0.007238554,-0.025569087,0.00035665932,0.01374121,-0.0032078433,-0.00016975813,0.015895382,-0.024003632,-0.015413704,0.02726834,0.019347409,-0.019802328,-0.008850838,0.0042247195,-0.002035425,0.09697789,0.015721442,0.0010670511,0.01902629,0.01116557,-0.017139718,-0.026987363,-0.0009867714,-0.0016206466,0.014129229,0.013527131,-0.028204937,-0.005786829,-0.017888995,0.02745566,0.0059105936,-0.01360072,-0.024070533,-0.003341643,-0.028231697,-0.006358822,-0.010188833,-0.015761582,0.015908763,0.010048344,0.0018330533,-0.0024067187,-0.014758087,0.032245684,-0.020993143,0.001787896,0.0047900225,0.0005410518,0.022946617,-0.008944497,0.000054983237,-0.011734217,-0.014396828,0.026933841,-0.011640558,0.02986405,0.020779064]";
            String query = String.format("SELECT TOP 100 c.author AS RepresentedData FROM c ORDER BY VectorDistance(c.Embedding,%s)", vector_1536);
            //System.out.println(query);
            String normalQuery = String.format("SELECT TOP 1000 c.author AS RepresentedData FROM c ORDER BY c.author");
            long start1 = new Date().getTime();
            if (normal) {
                query = normalQuery;
            }
            System.out.println("Diagnostics is " + diagnostics);
	        while(new Date().getTime()  - start1 < 120000) {
                cosmosAsyncContainer.queryItems(query  , Passenger.class).byPage()
                    .flatMap(passengerFeedResponse -> {
//                        for (Passenger passenger : passengerFeedResponse.getResults()) {
//                           System.out.println(passenger);
//                        }
                        //System.out.println(passengerFeedResponse.getCosmosDiagnostics());
                        //System.out.println(passengerFeedResponse.getActivityId());
                        //System.out.println(passengerFeedResponse.getCorrelationActivityId());
                        return Flux.empty();
                    })
                    .blockLast();
            }
	    System.out.println("Warm Up is over");
            int i = 0;
            LinkedList<Long> times = new LinkedList<>();
            long start2 = new Date().getTime();
            AtomicReference<String> diagnosticsStr = new AtomicReference<>("");
            while(new Date().getTime() - start2 < 600000) {
                long start = new Date().getTime();
                cosmosAsyncContainer.queryItems(query , Passenger.class).byPage()
                    .flatMap(passengerFeedResponse -> {
//                        for (Passenger passenger : passengerFeedResponse.getResults()) {
//                           System.out.println(passenger);
//                        }
                        if (diagnostics) {
                            diagnosticsStr.set(diagnosticsStr.get() + passengerFeedResponse.getCosmosDiagnostics().toString() + "\n ---------- \n");
                        }
                        //System.out.println(passengerFeedResponse.getActivityId());
                        //System.out.println(passengerFeedResponse.getCorrelationActivityId());
                        return Flux.empty();
                    })
                    .blockLast();
                long diff = new Date().getTime() - start;
                times.add(diff);
                i++;
            }
            if (diagnostics) {
                writeDiagnostics(diagnosticsStr.get());
            }


            long sum = 0;
            for (Long value : times) {
                sum += value;
            }
            // System.out.println(sum);

            // Calculate the average
            double average = (double) sum / times.size();

            System.out.println("Sum: " + sum);
            System.out.println("Average: " + average);



        }

        private static void writeDiagnostics(String diagnosticsString) {
            try {
                // Create FileWriter object
                FileWriter writer = new FileWriter("diagnostics.txt");

                // Write some text
                writer.write(diagnosticsString);


                // Close the writer after writing is done
                writer.close();

                System.out.println("Successfully wrote to the diagnostics.");
            } catch (IOException e) {
                System.out.println("An error occurred: " + e.getMessage());
            }
        }
        static final class Passenger {
            private final String id;
            private ArrayList<Double> Embedding;
            private String author;
            Passenger() {
                this.id = UUID.randomUUID().toString();
            }
            Passenger(String author, ArrayList<Double> embedding) {
                this.id = UUID.randomUUID().toString();
                this.Embedding = embedding;
                this.author = author;
            }

            public String getId() {
                return id;
            }
            public String getAuthor() { return this.author; }



            public ArrayList<Double> getEmbedding() {
                return Embedding;
            }
        }
}



